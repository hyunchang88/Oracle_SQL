SELECT *
FROM EMPLOYEE;

SELECT EMP_NAME,
			SALARY*12,
			(SALARY+( SALARY*BONUS_PCT) )*12
FROM 	EMPLOYEE;

SELECT EMP_NAME AS 이름,
			SALARY*12 AS "1년 급여",
			( SALARY+( SALARY+BONUS_PCT))*12 AS 총소득
FROM 	EMPLOYEE;

SELECT EMP_ID,
			EMP_NAME,
			'재직' AS 근무여부
FROM	EMPLOYEE;

SELECT DISTINCT DEPT_ID
FROM	EMPLOYEE;

SELECT DISTINCT JOB_ID, DEPT_ID
FROM	EMPLOYEE;

SELECT EMP_NAME AS 이름,
			DEPT_ID AS 부서
FROM 	EMPLOYEE
WHERE	DEPT_ID = '90';

SELECT	EMP_NAME AS 이름,
			SALARY AS 급여
FROM	EMPLOYEE
WHERE	SALARY > 4000000;

SELECT	EMP_NAME AS 이름,
			DEPT_ID AS 부서,
			SALARY AS 급여
FROM	EMPLOYEE
WHERE	DEPT_ID = '90'
AND 		SALARY > 2000000;

SELECT	EMP_NAME AS 이름,
			DEPT_ID AS 부서,
			SALARY AS 급여
FROM	EMPLOYEE
WHERE	DEPT_ID = '90'
OR 		DEPT_ID = '20';

SELECT EMP_ID||EMP_NAME||SALARY
FROM	EMPLOYEE;

SELECT EMP_NAME||' 의 월급은 '||SALARY||' 원 입니다.'
FROM	EMPLOYEE;

SELECT EMP_NAME,
			SALARY
FROM	EMPLOYEE
WHERE	SALARY BETWEEN 3500000 AND 5500000;

SELECT EMP_NAME,
			SALARY
FROM	EMPLOYEE
WHERE	SALARY >= 3500000
AND		SALARY <= 5500000;

SELECT EMP_NAME, SALARY
FROM 	EMPLOYEE
WHERE	EMP_NAME LIKE '김%';

SELECT EMP_NAME, PHONE
FROM 	EMPLOYEE
WHERE	PHONE LIKE '___9_______';

SELECT EMP_NAME,
			EMAIL
FROM	EMPLOYEE
WHERE	EMAIL LIKE '___\_%' ESCAPE '\';

SELECT EMP_NAME,
			EMAIL
FROM	EMPLOYEE
WHERE	EMAIL LIKE '___#_%' ESCAPE '#';

SELECT * FROM JOB;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, MGR_ID, DEPT_ID
FROM 	EMPLOYEE
WHERE	MGR_ID IS NULL
AND		DEPT_ID IS NULL;

SELECT EMP_NAME, MGR_ID, BONUS_PCT
FROM 	EMPLOYEE
WHERE	MGR_ID IS NULL
AND		BONUS_PCT IS NOT NULL;

SELECT EMP_NAME, DEPT_ID, SALARY
FROM 	EMPLOYEE
WHERE	DEPT_ID IN ( '60', '90' );

SELECT EMP_NAME, DEPT_ID, SALARY
FROM 	EMPLOYEE
WHERE	DEPT_ID = '60' 
OR		DEPT_ID = '90';

SELECT EMP_NAME, DEPT_ID, SALARY
FROM 	EMPLOYEE
WHERE	DEPT_ID = 60 
OR		DEPT_ID = 90;

SELECT EMP_NAME, SALARY, DEPT_ID
FROM 	EMPLOYEE
WHERE	DEPT_ID = '20'
OR		DEPT_ID = '90'
AND 		SALARY > 3000000;

SELECT EMP_NAME, SALARY, DEPT_ID
FROM 	EMPLOYEE
WHERE	( DEPT_ID = '20'
OR		DEPT_ID = '90' )
AND 		SALARY > 3000000;

/*
 * 		BASIC SELECT
 */

/*
1. 춘 기술대학교의 학과 이름과 계열을 표시하시오. 단, 출력 헤더는 "학과 명", "계열"
으로 표시하도록 한다.
 */
SELECT DEPARTMENT_NAME AS "학과 명",
			CATEGORY AS 계열
FROM	TB_DEPARTMENT;

/*
2. 학과의 학과 정원을 다음과 같은 형태로 화면에 출력핚다.
 */
SELECT	DEPARTMENT_NAME||'의 정원은'||CAPACITY||'명 입니다.' AS "학과별 정원"
FROM	TB_DEPARTMENT;


SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_STUDENT;
/*
3. "국어국문학과" 에 다니는 여학생 중 현재 휴학중인 여학생을 찾아달라는 요청이
들어왔다. 누구인가? (국문학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서
찾아 내도록 하자)
 */
SELECT STUDENT_NAME, STUDENT_SSN
FROM	TB_STUDENT
WHERE	DEPARTMENT_NO = '001'
AND		ABSENCE_YN = 'Y'
AND		STUDENT_SSN LIKE '_______2%';

/*
4. 도서관에서 대출 도서 장기 연체자 들을 찾아 이름을 게시하고자 핚다. 그 대상자들의
학번이 다음과 같을 때 대상자들을 찾는 적절한 SQL 구문을 작성하시오.
 */
SELECT STUDENT_NAME
FROM	TB_STUDENT
WHERE	STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119');

/*
5. 입학정원이 20 명 이상 30 명 이하인 학과들의 학과 이름과 계열을 출력하시오.
 */
SELECT DEPARTMENT_NAME, CATEGORY
FROM	TB_DEPARTMENT
WHERE	CAPACITY BETWEEN 20 AND 30;

SELECT * FROM TB_PROFESSOR;
/*
6. 춘 기술대학교는 총장을 제외하고 모든 교수들이 소속 학과를 가지고 있다. 그럼 춘
기술대학교 총장의 이름을 알아낼 수 있는 SQL 문장을 작성하시오.
 */
SELECT PROFESSOR_NAME
FROM	TB_PROFESSOR
WHERE	DEPARTMENT_NO IS NULL;

SELECT * FROM TB_STUDENT;
/*
7. 혹시 전산상의 착오로 학과가 지정되어 있지 않은 학생이 있는지 확인하고자 한다.
어떠한 SQL 문장을 사용하면 될 것인지 작성하시오.
 */
SELECT STUDENT_NAME
FROM	TB_STUDENT
WHERE	DEPARTMENT_NO IS NULL;

SELECT * FROM TB_CLASS;
/*
8. 수강신청을 하려고 핚다. 선수과목 여부를 확인해야 하는데, 선수과목이 존재하는
과목들은 어떤 과목인지 과목번호를 조회해보시오.
 */
SELECT CLASS_NO
FROM 	TB_CLASS
WHERE	PREATTENDING_CLASS_NO IS NOT NULL;

SELECT * FROM TB_DEPARTMENT;
/*
9. 춘 대학에는 어떤 계열(CATEGORY)들이 있는지 조회해보시오.
 */
SELECT DISTINCT CATEGORY
FROM	TB_DEPARTMENT;

SELECT * FROM TB_STUDENT;
/*
10. 02 학번 전주 거주자들의 모임을 만들려고 핚다. 휴학한 사람들은 제외한 재학중인
학생들의 학번, 이름, 주민번호를 출력하는 구문을 작성하시오.

ENTRANCE_DATE 형식이 00/00/00 (연도/월/일) 이렇게 됌
 */
SELECT 	STUDENT_NO, STUDENT_NAME, STUDENT_SSN 
FROM   	TB_STUDENT
WHERE 	ENTRANCE_DATE LIKE '02%'
AND    	ABSENCE_YN = 'N'
AND    	STUDENT_ADDRESS LIKE '%전주%';




SELECT LENGTH(CHARTYPE),
			LENGTH(VARCHARTYPE)
FROM	COLUMN_LENGTH;

SELECT EMAIL,
			INSTR( EMAIL, 'c', -1, 2 ) 위치
FROM 	EMPLOYEE;

SELECT EMAIL,
			INSTR( EMAIL, 'c', INSTR( EMAIL, '.' )-1 ) 위치
FROM 	EMPLOYEE;

SELECT EMAIL AS 원본데이터,
			LENGTH(EMAIL) AS 원본길이,
			RPAD(EMAIL, 20) AS 적용결과,
			LENGTH(LPAD(EMAIL, 20, ',')) AS 결과길이
FROM	EMPLOYEE;

SELECT LTRIM ('   tech') FROM DUAL;
SELECT LTRIM ('   tech', ' ') FROM DUAL;
SELECT LTRIM ('000123', '0') FROM DUAL;
SELECT LTRIM ('123123Tech123', '123') FROM DUAL;
SELECT LTRIM ('xyxzyyyTech123', 'xyz') FROM DUAL;
SELECT LTRIM ('6372Tech', '0123456789') FROM DUAL;

SELECT TRIM ('  tech  ') FROM DUAL;
SELECT TRIM ('a' FROM 'aatechaaa') FROM DUAL;
SELECT TRIM (LEADING '0' FROM '000123') FROM DUAL;
SELECT TRIM (TRAILING '1' FROM 'Teach1') FROM DUAL;
SELECT TRIM (BOTH '1' FROM '123Teach111') FROM DUAL;
SELECT TRIM (LEADING FROM '   teach  ') FROM DUAL;

SELECT SUBSTR ('This is a test', 6, 2) FROM DUAL;
SELECT SUBSTR ('This is a test', 6) FROM DUAL;
SELECT SUBSTR ('이것은 연습입니다', 3, 4) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', 1, 4) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -3, 3) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -6, 3) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -8, 2) FROM DUAL;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME AS 이름,
			SUBSTR(HIRE_DATE,1,2)||' 년 '||
			SUBSTR(HIRE_DATE,4,2)||' 월 '||
			SUBSTR(HIRE_DATE,7,2)||' 일 ' AS 입사일
FROM 	EMPLOYEE
WHERE	JOB_ID = 'J7';

SELECT ROUND(125.315) FROM DUAL;
SELECT ROUND(125.315, 0) FROM DUAL;
SELECT ROUND(125.315, 1) FROM DUAL;
SELECT ROUND(125.315, -1) FROM DUAL;
SELECT ROUND(125.315, 3) FROM DUAL;
SELECT ROUND(-125.315, 2) FROM DUAL;

SELECT TRUNC(125.315) FROM DUAL;
SELECT TRUNC(125.315, 0) FROM DUAL;
SELECT TRUNC(125.315, 1) FROM DUAL;
SELECT TRUNC(125.315, -1) FROM DUAL;
SELECT TRUNC(125.315, 3) FROM DUAL;
SELECT TRUNC(-125.315, 2) FROM DUAL;

SELECT SYSDATE FROM DUAL;

SELECT EMP_NAME,
			HIRE_DATE,
			ADD_MONTHS( HIRE_DATE, 240)
FROM	EMPLOYEE;

SELECT EMP_NAME,
			HIRE_DATE,
			MONTHS_BETWEEN('10/01/01', HIRE_DATE)/12 AS 근무년수
FROM	EMPLOYEE
WHERE	MONTHS_BETWEEN('10/01/01', HIRE_DATE) > 120;

SELECT EMP_NAME,
			HIRE_DATE,
			TRUNC(MONTHS_BETWEEN('10/01/01', HIRE_DATE)/12, 1) AS 근무년수
FROM	EMPLOYEE
WHERE	MONTHS_BETWEEN('10/01/01', HIRE_DATE) > 120;

SELECT TO_CHAR(1234, '999999') FROM DUAL;
SELECT TO_CHAR(1234, '099999') FROM DUAL;
SELECT TO_CHAR(1234, 'L99999') FROM DUAL;
SELECT TO_CHAR(1234, '99,999') FROM DUAL;
SELECT TO_CHAR(1234, '09,999') FROM DUAL;
SELECT TO_CHAR(1000, '9.9EEEE') FROM DUAL;
SELECT TO_CHAR(1000, '999') FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'PM HH24:MI:SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'AM HH:MI:SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'MON DY, YYYY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD DAY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-fmMM-DD DAY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-fmDD DAY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'Year, Q') FROM DUAL;

SELECT EMP_NAME AS 이름,
			TO_CHAR(HIRE_DATE, 'YYYY-MM-DD') AS 입사일
FROM	EMPLOYEE
WHERE	JOB_ID = 'J7';

SELECT EMP_NAME AS 이름,
			TO_CHAR(HIRE_DATE, 'YYYY"년" MM"월" DD"일"') AS 입사일
FROM	EMPLOYEE
WHERE	JOB_ID = 'J7';

SELECT TO_DATE('20100101', 'YYYYMMDD') FROM DUAL;
SELECT TO_CHAR('20100101', 'YYYY, MON') FROM DUAL;
SELECT TO_CHAR(TO_DATE('20100101', 'YYYYMMDD'), 'YYYY, MON') FROM DUAL;
SELECT TO_DATE('041030 143000', 'YYMMDD HH24MISS') FROM DUAL;
SELECT TO_CHAR(TO_DATE('041030 143000', 'YYMMDD HH24MISS'), 'DD-MON-YY HH:MI:SS PM') FROM DUAL;
SELECT TO_DATE('980630', 'YYMMDD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('980630', 'YYMMDD'), 'YYYY.MM.DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('980630', 'RRMMDD'), 'YYYY.MM.DD') FROM DUAL;

SELECT EMP_NAME, EMP_NO,
			SUBSTR(EMP_NO,1,6)AS 앞부분,
			SUBSTR(EMP_NO,8)AS 뒷부분,
			TO_NUMBER(SUBSTR(EMP_NO,1,6))+TO_NUMBER(SUBSTR(EMP_NO,8))AS 결과
FROM	EMPLOYEE
WHERE	EMP_ID = '101';

SELECT EMP_NAME, EMP_NO,
			SUBSTR(EMP_NO,1,6)AS 앞부분,
			SUBSTR(EMP_NO,8)AS 뒷부분,
			SUBSTR(EMP_NO,1,6)+SUBSTR(EMP_NO,8)AS 결과
FROM	EMPLOYEE
WHERE	EMP_ID = '101';

SELECT EMP_NAME, SALARY, NVL(BONUS_PCT,0)
FROM	EMPLOYEE
WHERE	SALARY>3500000;

SELECT EMP_NAME,
			(SALARY*12)+((SALARY*12)*BONUS_PCT)
FROM	EMPLOYEE
WHERE	SALARY > 3500000;

SELECT EMP_NAME,
			(SALARY*12)+((SALARY*12)*NVL(BONUS_PCT,0))
FROM	EMPLOYEE
WHERE	SALARY > 3500000;

SELECT EMP_NAME,
			DECODE(SUBSTR(EMP_NO,8,1),
				'1', '남', '2', '여', '3', '남', '4', '여') AS 성별
FROM	EMPLOYEE
WHERE	DEPT_ID = '50';

SELECT EMP_NAME,
			DECODE(SUBSTR(EMP_NO,8,1),
				'1', '남', '3', '남', '여') AS 성별
FROM	EMPLOYEE
WHERE	DEPT_ID = '50';

SELECT EMP_ID, EMP_NAME,
			DECODE(MGR_ID, NULL, '없음', MGR_ID) AS 관리자
FROM	EMPLOYEE
WHERE	JOB_ID = 'J4';

SELECT EMP_ID, EMP_NAME,
			NVL(MGR_ID, '없음') AS 관리자
FROM	EMPLOYEE
WHERE	JOB_ID = 'J4';

SELECT EMP_NAME,
			JOB_ID,
			SALARY,
			DECODE(JOB_ID,
						'J7', SALARY*1.1,
						'J6', SALARY*1.15,
						'J5', SALARY*1.2,
						SALARY*1.05) AS 인상급여
FROM 	EMPLOYEE;

SELECT EMP_NAME,
			JOB_ID,
			SALARY,
			CASE JOB_ID 
				WHEN 'J7' THEN TO_CHAR(SALARY*1.1)
				WHEN 'J6' THEN TO_CHAR(SALARY*1.15)
				WHEN 'J5' THEN TO_CHAR(SALARY*1.2)
				ELSE TO_CHAR(SALARY*1.05) END AS 인상급여
FROM 	EMPLOYEE;

SELECT EMP_ID,
			EMP_NAME,
			SALARY,
			CASE WHEN SALARY <= 3000000 THEN '초급'
					WHEN SALARY <= 4000000 THEN '중급'
					ELSE '고급' END AS 구분
FROM 	EMPLOYEE;

SELECT DEPT_ID,BONUS_PCT FROM EMPLOYEE;

SELECT AVG(BONUS_PCT) AS 기본평균,
			AVG(DISTINCT BONUS_PCT) AS 중복제거평균,
			AVG(NVL(BONUS_PCT,0)) AS NULL포함평균
FROM	EMPLOYEE
WHERE	DEPT_ID IN ('50', '90')
OR		DEPT_ID IS NULL;

SELECT JOB_ID, DEPT_ID FROM	EMPLOYEE;
SELECT JOB_ID, DEPT_ID FROM	EMPLOYEE WHERE DEPT_ID = '50' OR DEPT_ID IS NULL;
SELECT DISTINCT JOB_ID, DEPT_ID FROM	EMPLOYEE WHERE DEPT_ID = '50' OR DEPT_ID IS NULL;

SELECT COUNT(*),
			COUNT(JOB_ID),
			COUNT(DISTINCT JOB_ID)
FROM	EMPLOYEE
WHERE	DEPT_ID = '50'
OR		DEPT_ID IS NULL;

SELECT EMP_NAME, SALARY
FROM	EMPLOYEE
WHERE	DEPT_ID = '50'
OR		DEPT_ID IS NULL
ORDER BY SALARY DESC;

SELECT EMP_NAME, HIRE_DATE, DEPT_ID
FROM 	EMPLOYEE
WHERE	HIRE_DATE > TO_DATE('20030101', 'YYYYMMDD')
ORDER BY DEPT_ID DESC, HIRE_DATE, EMP_NAME;

SELECT	EMP_NAME AS 이름,
			HIRE_DATE AS 입사일,
			DEPT_ID AS 부서코드
FROM 	EMPLOYEE
WHERE	HIRE_DATE > TO_DATE('20030101', 'YYYYMMDD')
ORDER BY 부서코드 DESC, 입사일, 이름;

SELECT	EMP_NAME AS 이름,
			HIRE_DATE AS 입사일,
			DEPT_ID AS 부서코드
FROM 	EMPLOYEE
WHERE	HIRE_DATE > TO_DATE('20030101', 'YYYYMMDD')
ORDER BY 3 DESC, 2, 1;

SELECT 	DEPT_ID AS 부서,
			ROUND(AVG(SALARY),-4) AS 평균급여
FROM	EMPLOYEE
GROUP BY DEPT_ID
ORDER BY 1;

SELECT	DECODE(SUBSTR(EMP_NO,8,1),
				'1', '남', '3', '남', '여') AS 성별,
			ROUND(AVG(SALARY),-4) AS 평균급여
FROM	EMPLOYEE
GROUP BY DECODE(SUBSTR(EMP_NO,8,1),
					'1', '남', '3', '남', '여')
ORDER BY 2;

/*
 * 셀렉트 절에 일반구문과 그룹 함수를 같이 못써
 */
SELECT	DEPT_ID, COUNT(*)
FROM	EMPLOYEE;
/*
 * 같이 쓰고 싶으면 그룹바이 절에서 일반구문으로 잡아주면 됌
 * 그럼 그룹별 카운트가 가능함
 */
SELECT	DEPT_ID,
			COUNT(*)
FROM	EMPLOYEE
GROUP BY DEPT_ID
ORDER BY 1;

SELECT	EMP_NAME,
			DEPT_ID,
			COUNT(*)
FROM	EMPLOYEE
GROUP BY EMP_NAME, DEPT_ID;
/*
 * 그룹바이 절에 명시된 컬럼만 셀렉트 절에 명시가능
 * 그룹바이 절에 두가지가 명시되어 있으면 그 두개가 조합된 것을 하나의 그룹으로 잡아
 * 
 * 꼭 그룹바이 절에 명시된 컬렁이 셀렉트 정에 명시되어야 하는 것은 아님
 */

SELECT	MAX(SUM(SALARY))
FROM 	EMPLOYEE
GROUP BY DEPT_ID;

SELECT 	DEPT_ID,
			MAX(SUM(SALARY))
FROM	EMPLOYEE
GROUP BY DEPT_ID;

SELECT MAX(SUM(SALARY))
FROM	EMPLOYEE
GROUP BY DEPT_ID;

SELECT	DEPT_ID, SUM(SALARY)
FROM	EMPLOYEE
GROUP BY DEPT_ID
HAVING	SUM(SALARY) > 9000000;

/*
 * WHERE 절에는 그룹함수를 사용할 수 없음
 * → WHERE 절이 수행되어야 그룹 함수가 실행 될 대상 그룹이 결정
 */
SELECT	DEPT_ID, SUM(SALARY)
FROM	EMPLOYEE
WHERE	SUM(SALARY) > 9000000
GROUP BY DEPT_ID;

SELECT	DEPT_ID,
			SUM(SALARY)
FROM	EMPLOYEE
WHERE 	DEPT_ID IS NOT NULL
GROUP BY ROLLUP(DEPT_ID);

SELECT	DEPT_ID,
			JOB_ID,
			SUM(SALARY)
FROM	EMPLOYEE
WHERE	DEPT_ID IS NOT NULL
AND 		JOB_ID IS NOT NULL
GROUP BY ROLLUP(DEPT_ID, JOB_ID)
ORDER BY DEPT_ID, JOB_ID;

/*
 * 		ADDITIONAL SELECT - 함수
 */

/* 1. 영어영문학과(학과코드 002) 학생들의 학번과 이름, 입학 년도를 입학 년도가 빠른
 * 순으로 표시하는 SQL 문장을 작성하시오.( 단, 헤더는 "학번", "이름", "입학년도" 가
 * 표시되도록 한다.)
 */
SELECT * FROM TB_STUDENT;

SELECT	STUDENT_NO AS 학번,
			STUDENT_NAME AS 이름,
			ENTRANCE_DATE AS 입학년도
FROM	TB_STUDENT
WHERE	DEPARTMENT_NO = '002'
ORDER BY ENTRANCE_DATE ASC;

-- 답
SELECT STUDENT_NO AS 학번,
       STUDENT_NAME AS 이름,
			 TO_CHAR(ENTRANCE_DATE, 'RRRR-MM-DD') AS 입학년도
FROM   TB_STUDENT
WHERE  DEPARTMENT_NO='002'
ORDER BY ENTRANCE_DATE;


/*
 * 2. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 한 명 있다고 한다. 
 * 그 교수의 이름과 주민번호를 화면에 출력하는 SQL 문장을 작성해 보자. 
 * (* 이때 올바르게 작성한 SQL 문장의 결과 값이 예상과 다르게 나올 수 있다.
 *  원인이 무엇일지 생각해볼 것)
 */

SELECT * FROM TB_PROFESSOR;

SELECT	PROFESSOR_NAME AS 교수이름,
			PROFESSOR_SSN AS 주민번호
FROM	TB_PROFESSOR
WHERE	PROFESSOR_NAME LIKE '____';

--답
SELECT PROFESSOR_NAME , 
       PROFESSOR_SSN
FROM   TB_PROFESSOR
WHERE  PROFESSOR_NAME NOT LIKE '___';


/*
 *  3. 춘 기술대학교의 남자 교수들의 이름과 나이를 출력하는 SQL 문장을 작성하시오. 단
 *  이때 나이가 적은 사람에서 많은 사람 순서로 화면에 출력되도록 만드시오. (단, 교수 중
 *  2000년 이후 출생자는 없으며 출력 헤더는 "교수이름", "나이"로 한다. 나이는 ‘만’으로
 *  계산한다.) (만으로 하지 말래)
 */
 
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME AS 교수이름,
			SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'),1,4) AS 나이
FROM	TB_PROFESSOR;

SELECT PROFESSOR_NAME AS 교수이름,
			SUBSTR(PROFESSOR_SSN,1,2)+1900 AS 나이
FROM	TB_PROFESSOR;

SELECT PROFESSOR_NAME AS 교수이름,
			SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'),1,4) 
			- (SUBSTR(PROFESSOR_SSN,1,2)+1900) 
			AS 나이
FROM	TB_PROFESSOR;

-- 답
SELECT PROFESSOR_NAME AS 교수이름,
       TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - TO_NUMBER('19' || SUBSTR(PROFESSOR_SSN, 1, 2)) AS 나이
FROM   TB_PROFESSOR
WHERE  SUBSTR(PROFESSOR_SSN, 8, 1) = '1'
ORDER BY 2, 1;



/*
 * 4. 교수들의 이름 중 성을 제외한 이름만 출력하는 SQL 문장을 작성하시오. 출력 헤더는
 * '이름‛ 이 찍히도록 한다. (성이 2자인 경우는 교수는 없다고 가정하시오)
 */

SELECT * FROM TB_PROFESSOR;

SELECT	SUBSTR(PROFESSOR_NAME,2,2) AS 이름
FROM 	TB_PROFESSOR;

-- 답
SELECT SUBSTR(PROFESSOR_NAME, 2) AS 이름
FROM   TB_PROFESSOR;


/*
 * 5. 춘 기술대학교의 재수생 입학자를 구하려고 한다. 어떻게 찾아낼 것인가? 이때,
 * 19살에 입학하면 재수를 하지 않은 것으로 간주한다.
 * 
 * 이거 숫자가 너무 많은데???
 */

SELECT * FROM TB_STUDENT;

SELECT 	STUDENT_NO, STUDENT_NAME,
			SUBSTR(TO_CHAR(ENTRANCE_DATE, 'YYYYMMDD'),1,4)
			- (SUBSTR(STUDENT_SSN,1,2)+1900)
FROM	TB_STUDENT;

SELECT 	STUDENT_NO, STUDENT_NAME		
FROM	TB_STUDENT
WHERE	(SUBSTR(TO_CHAR(ENTRANCE_DATE, 'YYYYMMDD'),1,4) 
			- (SUBSTR(STUDENT_SSN,1,2)+1900)) <= 19;
			
--답
SELECT  STUDENT_NO,
        STUDENT_NAME
FROM    TB_STUDENT
WHERE   TO_NUMBER(TO_CHAR(ENTRANCE_DATE, 'YYYY'))  - TO_NUMBER(TO_CHAR(TO_DATE(SUBSTR(STUDENT_SSN, 1, 2), 'RR'), 'YYYY')) > 19
ORDER BY 1;


/*
 * 6. 2020년 크리스마스는 무슨 요일인가?
 */
			
SELECT TO_DATE('20170609', 'YYYYMMDD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL;
SELECT TO_DATE(SUBSTR('20170609',1,8)) FROM DUAL;

SELECT TO_CHAR(TO_DATE(SUBSTR('20201225',1,8)), 'DAY') FROM DUAL;

--답
SELECT TO_CHAR(TO_DATE('2020/12/25'), 'YYYYMMDD DAY') FROM DUAL;

/*
 * 7. TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 은 각각 몇 년 몇
 * 월 몇 일을 의미할까? 또 TO_DATE('99/10/11','RR/MM/DD'),
 * TO_DATE('49/10/11','RR/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미할까?
 */
SELECT TO_DATE('99/10/11','YY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11','YY/MM/DD'), 'YYYY"년"MM"월"DD"일"') FROM DUAL;
SELECT TO_CHAR(TO_DATE('49/10/11','YY/MM/DD'), 'YYYY"년"MM"월"DD"일"') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11','RR/MM/DD'), 'YYYY"년"MM"월"DD"일"') FROM DUAL;
SELECT TO_CHAR(TO_DATE('49/10/11','RR/MM/DD'), 'YYYY"년"MM"월"DD"일"') FROM DUAL;

--답
SELECT TO_DATE('99/10/11', 'YY/MM/DD') FROM DUAL;
SELECT TO_DATE('49/10/11', 'YY/MM/DD') FROM DUAL;
SELECT TO_DATE('99/10/11', 'RR/MM/DD') FROM DUAL;
SELECT TO_DATE('49/10/11', 'RR/MM/DD') FROM DUAL;
/*
TO_DATE('99/10/11', 'YY/MM/DD') : 2099년 10월 11일
TO_DATE('49/10/11', 'YY/MM/DD') : 2049년 10월 11일
TO_DATE('99/10/11', 'RR/MM/DD') : 1999년 10월 11일
TO_DATE('49/10/11', 'RR/MM/DD') : 2049년 10월 11일
*/


/*
 * 8. 춘 기술대학교의 2000년도 이후 입학자들은 학번이 A로 시작하게 되어있다. 2000년도
 * 이전 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
 */ 

SELECT * FROM TB_STUDENT;

SELECT 	STUDENT_NO AS 학번,
			STUDENT_NAME AS 이름
FROM	TB_STUDENT
WHERE	SUBSTR(STUDENT_NO,1,1)!='A';

--답
SELECT STUDENT_NO,
       STUDENT_NAME
FROM   TB_STUDENT
WHERE  SUBSTR(STUDENT_NO, 1, 1) <> 'A'
ORDER BY 1;


/*
 * 9. 학번이 A517178 인 한아름 학생의 학점 총 평점을 구하는 SQL 문을 작성하시오. 단,
 * 이때 출력 화면의 헤더는 "평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 한
 * 자리까지만 표시한다.
 */
SELECT * FROM TB_STUDENT;

SELECT 	* 
FROM 	TB_STUDENT
WHERE	STUDENT_NAME = '한아름';

SELECT 	POINT AS 학점 
FROM 	TB_GRADE
WHERE	STUDENT_NO = 'A517178';

SELECT 	ROUND(AVG(POINT),1) AS 평점 
FROM 	TB_GRADE
WHERE	STUDENT_NO = 'A517178';

--답
SELECT ROUND(AVG(POINT), 1) AS 평점 
FROM   TB_GRADE
WHERE  STUDENT_NO = 'A517178';


/*
 *	 10. 학과별 학생수를 구하여 "학과번호", "학생수(명)" 의 형태로 헤더를 만들어 결과값이
 * 	출력되도록 하시오.
 */


--답
SELECT DEPARTMENT_NO AS 학과번호,
       COUNT(*) AS "학생수(명)"
FROM   TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;


/*
 * 11. 지도 교수를 배정받지 못한 학생의 수는 몇 명 정도 되는 알아내는 SQL 문을 작성하시오.
 */

--답
SELECT COUNT(*)
FROM   TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;



/*
 * 12. 학번이 A112113인 김고운 학생의 년도 별 평점을 구하는 SQL 문을 작성하시오.
 * 단, 이때 출력 화면의 헤더는 "년도", "년도 별 평점" 이라고 찍히게 하고, 
 * 점수는 반올림하여 소수점 이하 한 자리까지만 표시한다.
 */

--답
SELECT SUBSTR(TERM_NO, 1 ,4) AS 년도,
       ROUND(AVG(POINT), 1) AS "년도 별 평점" 
FROM   TB_GRADE
WHERE  STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4);


/*
 * 13. 학과 별 휴학생 수를 파악하고자 한다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을 작성하시오.
 */

--답
SELECT DEPARTMENT_NO AS 학과코드명,
       SUM(CASE WHEN ABSENCE_YN ='Y' THEN 1 
			     ELSE 0 END) AS "휴학생 수"
FROM   TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;


/*
 * 14. 춘 대학교에 다니는 동명이인(同名異人) 학생들의 이름을 찾고자 한다. 
 * 어떤 SQL 문장을 사용하면 가능하겠는가?
 */

--답
SELECT STUDENT_NAME AS 동일이름,
       COUNT(*)     AS "동명인 수"
FROM   TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) > 1;


/*
 * 15. 학번이 A112113 인 김고운 학생의 년도, 학기 별 평점과 년도 별 누적 평점 , 
 * 총 평점을 구하는 SQL 문을 작성하시오. 
 * (단, 평점은 소수점 1자리까지만 반올림하여 표시한다.)
 */

--답
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도,
       SUBSTR(TERM_NO, 5, 2) AS 학기,
			 ROUND(AVG(POINT), 1) AS 평점
FROM   TB_GRADE
WHERE  STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4),SUBSTR(TERM_NO, 5, 2));

------------------------------------------------------------------------

SELECT EMP_NAME, DEPT_NAME
FROM	EMPLOYEE E,
			DEPARTMENT D
WHERE	E.DEPT_ID = D.DEPT_ID;

SELECT 	EMP_NAME, DEPT_NAME
FROM 	EMPLOYEE
JOIN		DEPARTMENT USING(DEPT_ID);

SELECT 	EMP_NAME, DEPT_NAME
FROM 	EMPLOYEE E
JOIN		DEPARTMENT D ON(E.DEPT_ID = D.DEPT_ID);

SELECT 	EMP_NAME, DEPT_NAME, LOC_DESCRIBE
FROM 	EMPLOYEE 		E
JOIN		DEPARTMENT 	D ON(E.DEPT_ID = D.DEPT_ID)
JOIN		LOCATION 		L ON(L.LOCATION_ID = D.LOC_ID);

SELECT 	EMP_NAME, DEPT_NAME, LOC_DESCRIBE
FROM 	EMPLOYEE 		E
JOIN		DEPARTMENT 	D USING(DEPT_ID)
JOIN		LOCATION 		L ON(L.LOCATION_ID = D.LOC_ID);

SELECT * FROM EMPLOYEE;

SELECT * FROM DEPARTMENT;

SELECT	EMP_NAME, DEPT_NAME
FROM	EMPLOYEE
LEFT	JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT	EMP_NAME, DEPT_NAME
FROM	EMPLOYEE
RIGHT	JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT	EMP_NAME, DEPT_NAME
FROM	EMPLOYEE
FULL	JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT	EMP_NAME, DEPT_NAME
FROM	DEPARTMENT
RIGHT	JOIN EMPLOYEE USING (DEPT_ID)
ORDER BY 1;

SELECT * FROM EMPLOYEE;
SELECT * FROM SAL_GRADE;

SELECT	EMP_NAME, SALARY, SLEVEL
FROM	EMPLOYEE
JOIN		SAL_GRADE ON (SALARY BETWEEN LOWEST AND HIGHEST)
ORDER BY 3;


SELECT	E.EMP_NAME AS 직원,
			M.EMP_NAME AS 관리자
FROM	EMPLOYEE E
JOIN		EMPLOYEE M ON (E.MGR_ID = M.EMP_ID)
ORDER BY 1;

SELECT	E.EMP_NAME AS 직원,
			M.EMP_NAME AS 관리자
FROM	EMPLOYEE E
LEFT JOIN		EMPLOYEE M ON (E.MGR_ID = M.EMP_ID)
ORDER BY 1;

SELECT	EMP_NAME, JOB_TITLE, DEPT_NAME
FROM	EMPLOYEE
JOIN		JOB USING(JOB_ID)
JOIN		DEPARTMENT USING(DEPT_ID);

SELECT	EMP_NAME, JOB_TITLE, DEPT_NAME
FROM	EMPLOYEE
JOIN		DEPARTMENT USING(DEPT_ID)
JOIN		JOB USING(JOB_ID);

SELECT	EMP_NAME, DEPT_NAME
FROM	EMPLOYEE
JOIN		JOB USING (JOB_ID)
JOIN		DEPARTMENT USING (DEPT_ID)
JOIN		LOCATION ON (LOC_ID = LOCATION_ID)
WHERE	JOB_TITLE='대리'
AND 		LOC_DESCRIBE LIKE '아시아%';


SELECT	EMP_NAME,	JOB_ID, HIRE_DATE
FROM	EMPLOYEE
WHERE	DEPT_ID='20'
UNION
SELECT	DEPT_NAME, DEPT_ID
FROM	DEPARTMENT
WHERE	DEPT_ID='20';

SELECT	EMP_NAME,	JOB_ID, HIRE_DATE
FROM	EMPLOYEE
WHERE	DEPT_ID='20'
UNION
SELECT	DEPT_NAME, DEPT_ID, null
FROM	DEPARTMENT
WHERE	DEPT_ID='20';

SELECT EMP_NAME, TO_CHAR(SALARY)
FROM	EMPLOYEE
WHERE	DEPT_ID = '20'
UNION
SELECT DEPT_NAME, DEPT_ID
FROM	DEPARTMENT
WHERE	DEPT_ID='20';

SELECT EMP_NAME, JOB_ID, SALARY
FROM	EMPLOYEE
WHERE	JOB_ID = (SELECT 	JOB_ID
							FROM	EMPLOYEE
							WHERE	EMP_NAME = '나승원')
AND		SALARY > (SELECT	SALARY
							FROM	EMPLOYEE
							WHERE	EMP_NAME = '나승원');
							
SELECT	EMP_NAME, JOB_ID, SALARY
FROM	EMPLOYEE
WHERE	JOB_ID = 'J5'
AND		SALARY > '2300000';

SELECT	MIN(SALARY)
FROM	EMPLOYEE;

SELECT	EMP_NAME, SALARY
FROM	EMPLOYEE
WHERE	SALARY = (SELECT	MIN(SALARY)
							FROM	EMPLOYEE);
							
SELECT	EMP_NAME, SALARY, JOB_ID, DEPT_ID
FROM	EMPLOYEE
JOIN		JOB USING(JOB_ID)
JOIN		DEPARTMENT USING(DEPT_ID)
WHERE	SALARY = (SELECT	MIN(SALARY)
							FROM	EMPLOYEE);
							
-- 부서별 급여 총합이 최고인 부서의 부서 이름과 급여 총합을 검색하라.

SELECT		DEPT_NAME, SUM(SALARY)
FROM		EMPLOYEE
LEFT JOIN	DEPARTMENT USING(DEPT_ID)
GROUP BY	DEPT_ID, DEPT_NAME
HAVING		SUM(SALARY) = (SELECT	MAX(SUM(SALARY))
										FROM	EMPLOYEE
										GROUP BY	DEPT_ID);
-- 위에꺼 SUB QUERY 따로 써본것
SELECT	MAX(SUM(SALARY))
FROM	EMPLOYEE
GROUP BY	DEPT_ID;
--

SELECT	EMP_NAME, SALARY
FROM	EMPLOYEE
JOIN		JOB USING (JOB_ID)
WHERE	JOB_TITLE = '대리'
AND 		SALARY > ALL
							(SELECT SALARY
							FROM	EMPLOYEE
							JOIN		JOB USING (JOB_ID)
							WHERE	JOB_TITLE = '과장');		
							
SELECT	EMP_NAME, SALARY
FROM	EMPLOYEE
JOIN		JOB USING (JOB_ID)
WHERE	JOB_TITLE = '과장'

SELECT	EMP_NAME, SALARY
FROM	EMPLOYEE
JOIN		JOB USING (JOB_ID)
WHERE	JOB_TITLE = '대리'


SELECT	EMP_NAME, JOB_TITLE, SALARY
FROM	EMPLOYEE
LEFT JOIN JOB USING(JOB_ID)
WHERE	SALARY IN
						(SELECT TRUNC (AVG(SALARY), -5)
						FROM	 EMPLOYEE
						GROUP BY JOB_ID)
ORDER BY JOB_ID;

SELECT	EMP_NAME, JOB_TITLE, SALARY
FROM	EMPLOYEE
LEFT JOIN JOB USING (JOB_ID)
WHERE	(NVL(JOB_ID, ' '), SALARY) IN
				(SELECT	 NVL(JOB_ID, ' '),
							 TRUNC(AVG(SALARY), -5)
				FROM	 EMPLOYEE
				GROUP BY JOB_ID)
ORDER BY JOB_ID;

--  위에꺼 이해해 보려고 써본것
SELECT * FROM JOB;
SELECT * FROM EMPLOYEE;

SELECT	 NVL(JOB_ID, ' '),
			 TRUNC(AVG(SALARY), -5)
FROM	 EMPLOYEE
GROUP BY JOB_ID
--

SELECT	EMP_NAME, JOB_TITLE, SALARY
FROM	(SELECT JOB_ID, 
						TRUNC(AVG(SALARY), -5) AS JOBAVG
			FROM	EMPLOYEE
			GROUP BY JOB_ID) V
JOIN		EMPLOYEE E ON
			(JOBAVG = SALARY AND
			NVL(E.JOB_ID, ' ') = NVL(V.JOB_ID, ' '))
LEFT	JOIN JOB J ON (E.JOB_ID = J.JOB_ID)
ORDER BY JOB_ID;

-- SUBQUERY 확인용
SELECT JOB_ID, 
			TRUNC(AVG(SALARY), -5) AS JOBAVG
FROM	EMPLOYEE
GROUP BY JOB_ID
--

SELECT	EMP_NAME, JOB_TITLE, SALARY
FROM	EMPLOYEE E
LEFT	JOIN JOB J ON (E.JOB_ID = J.JOB_ID)
WHERE	SALARY = (SELECT TRUNC(AVG(SALARY), -5)
							FROM 	EMPLOYEE
							WHERE	NVL(JOB_ID, ' ') = 
										NVL(E.JOB_ID, ' '))
ORDER BY E.JOB_ID;


SELECT	EMP_ID, EMP_NAME, '관리자' AS 구분
FROM	EMPLOYEE E
WHERE	EXISTS (SELECT NULL
						FROM	EMPLOYEE
						WHERE	E.EMP_ID = MGR_ID)
UNION
SELECT	EMP_ID, EMP_NAME, '직원'
FROM	EMPLOYEE E2
WHERE 	NOT EXISTS (SELECT NULL
								FROM 	EMPLOYEE
								WHERE	E2.EMP_ID = MGR_ID)
ORDER BY 3, 1;

SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM LOCATION;

-- Additional SELECT -Option

/*
 * 1. 학생이름과 주소지를 표시하시오. 단, 출력 헤더는 "학생 이름", "주소지"로 하고,
	정렬은 이름으로 오름차순 표시하도록 한다.
 */

SELECT * FROM TB_STUDENT;

SELECT	STUDENT_NAME AS "학생 이름",
			STUDENT_ADDRESS AS "주소지"
FROM	TB_STUDENT
ORDER BY STUDENT_NAME ASC;

/*
 * 2. 휴학중인 학생들의 이름과 주민번호를 나이가 적은 순서로 화면에 출력하시오.
 */

SELECT * FROM TB_STUDENT;

SELECT STUDENT_NAME, STUDENT_SSN
FROM	TB_STUDENT
WHERE	ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;

/*
 * 3. 주소지가 강원도나 경기도인 학생들 중 1900 년대 학번을 가진 학생들의 이름과 학번,
주소를 이름의 오름차순으로 화면에 출력하시오. 단, 출력헤더에는 "학생이름","학번",
"거주지 주소" 가 출력되도록 한다.
 */

SELECT * FROM TB_STUDENT;

--한명 어디감????????????????????????????????????

SELECT	STUDENT_NAME AS 학생이름,
			STUDENT_NO AS 학번,
			STUDENT_ADDRESS AS "거주지 주소"
FROM 	TB_STUDENT
WHERE	(STUDENT_ADDRESS LIKE '강원도%'
OR		STUDENT_ADDRESS LIKE '경기도%')
AND		STUDENT_NO LIKE '99%';

/*
 * 4. 현재 법학과 교수 중 가장 나이가 많은 사람부터 이름을 확인핛 수 있는 SQL 문장을
작성하시오. (법학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아
내도록 하자)
 */

SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;


SELECT	PROFESSOR_NAME,
			PROFESSOR_SSN
FROM	TB_PROFESSOR
JOIN		TB_DEPARTMENT ON(DEPARTMENT_NAME='법학과')
ORDER BY PROFESSOR_SSN ASC;

/*
 * 5. 2004 년 2 학기에 'C3118100' 과목을 수강한 학생들의 학점을 조회하려고 한다. 학점이
높은 학생부터 표시하고, 학점이 같으면 학번이 낮은 학생부터 표시하는 구문을
작성해보시오.
 */

SELECT * FROM TB_GRADE;

SELECT 	STUDENT_NO, 
			TO_CHAR(POINT,'9.99') AS POINT
FROM	TB_GRADE
WHERE	CLASS_NO = 'C3118100'
AND 		TERM_NO = 200402
ORDER BY POINT DESC, STUDENT_NO;

/*
 * 6. 학생 번호, 학생 이름, 학과 이름을 학생 이름으로 오름차순 정렬하여 출력하는 SQL
문을 작성하시오.
 */

SELECT * FROM TB_STUDENT;
SELECT * FROM TB_DEPARTMENT;

--??????????????????????????????????????????????

SELECT 	STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM 	TB_STUDENT
JOIN		TB_DEPARTMENT USING (DEPARTMENT_NO)
ORDER BY STUDENT_NO ASC;

/*
 * 7. 춘 기술대학교의 과목 이름과 과목의 학과 이름을 출력하는 SQL 문장을 작성하시오.
 */

SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_CLASS;

SELECT	CLASS_NAME, DEPARTMENT_NAME
FROM	TB_CLASS
JOIN		TB_DEPARTMENT USING (DEPARTMENT_NO);

/*
 * 8. 과목별 교수 이름을 찾으려고 한다. 과목 이름과 교수 이름을 출력하는 SQL 문을
작성하시오.
 */

SELECT * FROM TB_CLASS;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_CLASS_PROFESSOR;

SELECT 	CLASS_NAME, PROFESSOR_NAME
FROM	TB_CLASS
JOIN		TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN		TB_PROFESSOR USING(PROFESSOR_NO);

/*
 * 9. 8 번의 결과 중 ‘인문사회’ 계열에 속한 과목의 교수 이름을 찾으려고 한다. 이에
해당하는 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
 */
SELECT * FROM TB_CLASS;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;

-- ??????????????????????????????????????????????????????????????????????????

SELECT 	CLASS_NAME, PROFESSOR_NAME
FROM	TB_CLASS
JOIN		TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN		TB_PROFESSOR USING(PROFESSOR_NO)
JOIN		TB_DEPARTMENT D ON(D.CATEGORY='인문사회');

/*
 * 10. ‘음악학과’ 학생들의 평점을 구하려고 한다. 음악학과 학생들의 "학번", "학생 이름",
"전체 평점"을 출력하는 SQL 문장을 작성하시오. (단, 평점은 소수점 1 자리까지만
반올림하여 표시한다.)
 */

SELECT * FROM TB_GRADE;
SELECT * FROM TB_STUDENT;
SELECT * FROM TB_DEPARTMENT;

SELECT  STUDENT_NO AS "학번",
    		 STUDENT_NAME AS "학생 이름",
     		 ROUND(AVG(POINT), 1) AS "전체 평점"
FROM 	 TB_STUDENT S
JOIN  	 TB_DEPARTMENT D ON (D.DEPARTMENT_NO=S.DEPARTMENT_NO)
JOIN  	 TB_GRADE G ON (G.STUDENT_NO=S.STUDENT_NO)
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
HAVING   DEPARTMENT_NAME = '음악학과';

/*
 * 11. 학번이 A313047 인 학생이 학교에 나오고 있지 않다. 지도 교수에게 내용을 전달하기
위한 학과 이름, 학생 이름과 지도 교수 이름이 필요하다. 이때 사용할 SQL 문을
작성하시오. 단, 출력헤더는 ‚학과이름‛, ‚학생이름‛, ‚지도교수이름‛으로
출력되도록 한다.
 */ 
SELECT * FROM TB_STUDENT;
SELECT * FROM TB_CLASS;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;

SELECT CLASS_NAME AS 학과이름,
			STUDENT_NAME AS 학생이름,
			PROFESSOR_NAME AS 지도교수이름
FROM	TB_STUDENT S
JOIN	TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO=P.PROFESSOR_NO);
			
--????????????????????????????????????????????????????????????			



/*
 * 12. 2007 년도에 '인갂관계론' 과목을 수강란 학생을 찾아 학생이름과 수강학기름 표시하는
SQL 문장을 작성하시오.
 */


/*
 * 13. 예체능 계열 과목 중 과목 담당교수를 한 명도 배정받지 못핚 과목을 찾아 그 과목
이름과 학과 이름을 출력하는 SQL 문장을 작성하시오.
 */


/*
 * 14. 춘 기술대학교 서반아어학과 학생들의 지도교수를 게시하고자 핚다. 학생이름과
지도교수 이름을 찾고 만일 지도 교수가 없는 학생일 경우 "지도교수 미지정‛으로
표시하도록 하는 SQL 문을 작성하시오. 단, 출력헤더는 ‚학생이름‛, ‚지도교수‛로
표시하며 고학번 학생이 먼저 표시되도록 핚다.
 */


/*
 *  15. 휴학생이 아닌 학생 중 평점이 4.0 이상인 학생을 찾아 그 학생의 학번, 이름, 학과
이름, 평점을 출력하는 SQL 문을 작성하시오.
 */


/*
 * 16. 환경조경학과 전공과목들의 과목 별 평점을 파악할 수 있는 SQL 문을 작성하시오.
 */



/*
 * 17. 춘 기술대학교에 다니고 있는 최경희 학생과 같은 과 학생들의 이름과 주소를 출력하는
SQL 문을 작성하시오.
 */



/*
 * 18. 국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번을 표시하는 SQL 문을
작성하시오.
 */



/*
 * 19. 춘 기술대학교의 "환경조경학과"가 속한 같은 계열 학과들의 학과 별 전공과목 평점을
파악하기 위한 적절한 SQL 문을 찾아내시오. 단, 출력헤더는 "계열 학과명",
"전공평점"으로 표시되도록 하고, 평점은 소수점 한 자리까지만 반올림하여 표시되도록
한다.
 */





















